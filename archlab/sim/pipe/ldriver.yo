                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f414030000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f514030000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f0d4010000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f0c8000000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Name: Tiankui Guo
                      | # ID: 1300012790@pku.edu.cn
                      | #
                      | # Use iaddl instead of the pair of irmovl and addl.
                      | # Explicitly decrease the number of instructions.
                      | #
                      | # Unrolling the loop.
                      | # Use both %esi and %edi to handle 2 elements each time the loop.
                      | # Avoiding Data Hazards by Forwarding.
                      | # mrmovl (%ebx), %esi	# read val from src...
                      | # bubble
                      | # rmmovl %esi, (%ecx)	# ...and store it to dst
                      | # mrmovl 4(%ebx), %edi	# read val from src...
                      | # bubble
                      | # rmmovl %edi, 4(%ecx)	# ...and store it to dst
                      | # -->
                      | # mrmovl (%ebx), %esi	# read val from src...
                      | # mrmovl 4(%ebx), %edi	# read val from src...
                      | # rmmovl %esi, (%ecx)	# ...and store it to dst
                      | # rmmovl %edi, 4(%ecx)	# ...and store it to dst
                      | # Implicitly decrease the number of bubbles.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
  0x048: c0f2ffffffff | 	iaddl $-1, %edx
  0x04e: 719c000000   | 	jle Npos3		# if so, goto Done:
  0x053:              | Loop1:
  0x053: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x059: 507304000000 | 	mrmovl 4(%ebx), %edi	# read val from src...
  0x05f: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x065: 407104000000 | 	rmmovl %edi, 4(%ecx)	# ...and store it to dst
  0x06b: 6266         | 	andl %esi, %esi		# val <= 0?
  0x06d: 7178000000   | 	jle Npos1		# if so, goto Npos:
  0x072: c0f001000000 | 	iaddl $1, %eax		# count++
  0x078:              | Npos1:
  0x078: 6277         | 	andl %edi, %edi		# val <= 0?
  0x07a: 7185000000   | 	jle Npos2		# if so, goto Npos:
  0x07f: c0f001000000 | 	iaddl $1, %eax		# count++
  0x085:              | Npos2:
  0x085: c0f308000000 | 	iaddl $8, %ebx		# src++
  0x08b: c0f108000000 | 	iaddl $8, %ecx		# dst++
  0x091: c0f2feffffff | 	iaddl $-2, %edx		# len--
  0x097: 7653000000   | 	jg Loop1			# if so, goto Loop:
  0x09c:              | Npos3:
  0x09c: 74ba000000   | 	jne Done
  0x0a1: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x0a7: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x0ad: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0af: 71ba000000   | 	jle Done		# if so, goto Npos:
  0x0b4: c0f001000000 | 	iaddl $1, %eax		# count++
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x0ba:              | Done:
  0x0ba: b07f         | 	popl %edi               # Restore callee-save registers
  0x0bc: b03f         | 	popl %ebx
  0x0be: b06f         | 	popl %esi
  0x0c0: 2054         | 	rrmovl %ebp, %esp
  0x0c2: b05f         | 	popl %ebp
  0x0c4: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x0c5:              | End:
                      | #/* $end ncopy-ys */
  0x0c5:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x0c8:              | 	.align 4
  0x0c8:              | src:
  0x0c8: ffffffff     | 	.long -1
  0x0cc: 02000000     | 	.long 2
  0x0d0: fdffffff     | 	.long -3
  0x0d4: fcffffff     | 	.long -4
  0x0d8: fbffffff     | 	.long -5
  0x0dc: 06000000     | 	.long 6
  0x0e0: 07000000     | 	.long 7
  0x0e4: f8ffffff     | 	.long -8
  0x0e8: 09000000     | 	.long 9
  0x0ec: f6ffffff     | 	.long -10
  0x0f0: 0b000000     | 	.long 11
  0x0f4: 0c000000     | 	.long 12
  0x0f8: 0d000000     | 	.long 13
  0x0fc: 0e000000     | 	.long 14
  0x100: f1ffffff     | 	.long -15
  0x104: 00000000     | 	.long 0
  0x108: efffffff     | 	.long -17
  0x10c: eeffffff     | 	.long -18
  0x110: 13000000     | 	.long 19
  0x114: ecffffff     | 	.long -20
  0x118: 15000000     | 	.long 21
  0x11c: 00000000     | 	.long 0
  0x120: e9ffffff     | 	.long -23
  0x124: 18000000     | 	.long 24
  0x128: 00000000     | 	.long 0
  0x12c: 00000000     | 	.long 0
  0x130: 1b000000     | 	.long 27
  0x134: e4ffffff     | 	.long -28
  0x138: e3ffffff     | 	.long -29
  0x13c: 1e000000     | 	.long 30
  0x140: e1ffffff     | 	.long -31
  0x144: e0ffffff     | 	.long -32
  0x148: dfffffff     | 	.long -33
  0x14c: 22000000     | 	.long 34
  0x150: 23000000     | 	.long 35
  0x154: dcffffff     | 	.long -36
  0x158: 25000000     | 	.long 37
  0x15c: daffffff     | 	.long -38
  0x160: 27000000     | 	.long 39
  0x164: 28000000     | 	.long 40
  0x168: 00000000     | 	.long 0
  0x16c: 2a000000     | 	.long 42
  0x170: 2b000000     | 	.long 43
  0x174: 2c000000     | 	.long 44
  0x178: d3ffffff     | 	.long -45
  0x17c: 2e000000     | 	.long 46
  0x180: d1ffffff     | 	.long -47
  0x184: 30000000     | 	.long 48
  0x188: cfffffff     | 	.long -49
  0x18c: ceffffff     | 	.long -50
  0x190: 33000000     | 	.long 51
  0x194: ccffffff     | 	.long -52
  0x198: 35000000     | 	.long 53
  0x19c: 36000000     | 	.long 54
  0x1a0: c9ffffff     | 	.long -55
  0x1a4: 38000000     | 	.long 56
  0x1a8: c7ffffff     | 	.long -57
  0x1ac: 00000000     | 	.long 0
  0x1b0: 3b000000     | 	.long 59
  0x1b4: 3c000000     | 	.long 60
  0x1b8: c3ffffff     | 	.long -61
  0x1bc: 3e000000     | 	.long 62
  0x1c0: 3f000000     | 	.long 63
  0x1c4: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x1d0:              | 	.align 16
  0x1d0:              | Predest:
  0x1d0: fadebc00     | 	.long 0xbcdefa
  0x1d4:              | dest:
  0x1d4: abefcd00     | 	.long 0xcdefab
  0x1d8: abefcd00     | 	.long 0xcdefab
  0x1dc: abefcd00     | 	.long 0xcdefab
  0x1e0: abefcd00     | 	.long 0xcdefab
  0x1e4: abefcd00     | 	.long 0xcdefab
  0x1e8: abefcd00     | 	.long 0xcdefab
  0x1ec: abefcd00     | 	.long 0xcdefab
  0x1f0: abefcd00     | 	.long 0xcdefab
  0x1f4: abefcd00     | 	.long 0xcdefab
  0x1f8: abefcd00     | 	.long 0xcdefab
  0x1fc: abefcd00     | 	.long 0xcdefab
  0x200: abefcd00     | 	.long 0xcdefab
  0x204: abefcd00     | 	.long 0xcdefab
  0x208: abefcd00     | 	.long 0xcdefab
  0x20c: abefcd00     | 	.long 0xcdefab
  0x210: abefcd00     | 	.long 0xcdefab
  0x214: abefcd00     | 	.long 0xcdefab
  0x218: abefcd00     | 	.long 0xcdefab
  0x21c: abefcd00     | 	.long 0xcdefab
  0x220: abefcd00     | 	.long 0xcdefab
  0x224: abefcd00     | 	.long 0xcdefab
  0x228: abefcd00     | 	.long 0xcdefab
  0x22c: abefcd00     | 	.long 0xcdefab
  0x230: abefcd00     | 	.long 0xcdefab
  0x234: abefcd00     | 	.long 0xcdefab
  0x238: abefcd00     | 	.long 0xcdefab
  0x23c: abefcd00     | 	.long 0xcdefab
  0x240: abefcd00     | 	.long 0xcdefab
  0x244: abefcd00     | 	.long 0xcdefab
  0x248: abefcd00     | 	.long 0xcdefab
  0x24c: abefcd00     | 	.long 0xcdefab
  0x250: abefcd00     | 	.long 0xcdefab
  0x254: abefcd00     | 	.long 0xcdefab
  0x258: abefcd00     | 	.long 0xcdefab
  0x25c: abefcd00     | 	.long 0xcdefab
  0x260: abefcd00     | 	.long 0xcdefab
  0x264: abefcd00     | 	.long 0xcdefab
  0x268: abefcd00     | 	.long 0xcdefab
  0x26c: abefcd00     | 	.long 0xcdefab
  0x270: abefcd00     | 	.long 0xcdefab
  0x274: abefcd00     | 	.long 0xcdefab
  0x278: abefcd00     | 	.long 0xcdefab
  0x27c: abefcd00     | 	.long 0xcdefab
  0x280: abefcd00     | 	.long 0xcdefab
  0x284: abefcd00     | 	.long 0xcdefab
  0x288: abefcd00     | 	.long 0xcdefab
  0x28c: abefcd00     | 	.long 0xcdefab
  0x290: abefcd00     | 	.long 0xcdefab
  0x294: abefcd00     | 	.long 0xcdefab
  0x298: abefcd00     | 	.long 0xcdefab
  0x29c: abefcd00     | 	.long 0xcdefab
  0x2a0: abefcd00     | 	.long 0xcdefab
  0x2a4: abefcd00     | 	.long 0xcdefab
  0x2a8: abefcd00     | 	.long 0xcdefab
  0x2ac: abefcd00     | 	.long 0xcdefab
  0x2b0: abefcd00     | 	.long 0xcdefab
  0x2b4: abefcd00     | 	.long 0xcdefab
  0x2b8: abefcd00     | 	.long 0xcdefab
  0x2bc: abefcd00     | 	.long 0xcdefab
  0x2c0: abefcd00     | 	.long 0xcdefab
  0x2c4: abefcd00     | 	.long 0xcdefab
  0x2c8: abefcd00     | 	.long 0xcdefab
  0x2cc: abefcd00     | 	.long 0xcdefab
  0x2d0:              | Postdest:
  0x2d0: bcfade00     | 	.long 0xdefabc
                      | 
  0x2d4:              | .align 4
                      | # Run time stack
  0x2d4: 00000000     | 	.long 0
  0x2d8: 00000000     | 	.long 0
  0x2dc: 00000000     | 	.long 0
  0x2e0: 00000000     | 	.long 0
  0x2e4: 00000000     | 	.long 0
  0x2e8: 00000000     | 	.long 0
  0x2ec: 00000000     | 	.long 0
  0x2f0: 00000000     | 	.long 0
  0x2f4: 00000000     | 	.long 0
  0x2f8: 00000000     | 	.long 0
  0x2fc: 00000000     | 	.long 0
  0x300: 00000000     | 	.long 0
  0x304: 00000000     | 	.long 0
  0x308: 00000000     | 	.long 0
  0x30c: 00000000     | 	.long 0
  0x310: 00000000     | 	.long 0
                      | 
  0x314:              | Stack:
